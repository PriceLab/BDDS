#true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- swiss.repeats %>%
anti_join(first.4.tomtom, by = c("Target.ID" = "Query.ID"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- first.4.tomtom %>% bind_rows(list(true.map,new.map))
nrow(full.map)
swiss.repeats$Query.ID[1]
swiss.repeats %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
first.4.tomtom %>% filter(Query.ID == swiss.repeats$Target.ID[1]) %>% nrow()
full.map %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
group_by(Target.ID) %>%
summarise(Duplicates = n()) %>%
nrow()
unique.map <- full.map[!duplicated(full.map),]
nrow(unique.map)
first.4.tomtom[!duplicated(first.4.tomtom),] %>% nrow()
swiss.repeats[!duplicated(swiss.repeats),] %>% nrow()
Table.1 <- unique.map
library(MotifDb)
# Grab all jaspar and HOCOMOCOv10 for Human/Mouse
human.mouse.motifs <- subset(MotifDb, dataSource %in% c("HOCOMOCOv10","jaspar2016"))
human.mouse.motifs <- subset(human.mouse.motifs, organism %in% c("Hsapiens","Mmusculus"))
# Grab all jaspare for other vertebrates:
vertebrates <- c("Ggallus","Nsp.","Ocuniculus","Rnorvegicus","Rrattus","Vertebrata", "Xlaevis")
vert.motifs <- subset(query(MotifDb, "jaspar2016"), organism %in% vertebrates)
# Grab all UP and SR motifs
all.uniprobe <- query(MotifDb, "uniprobe")
all.swiss <- query(MotifDb, "swissregulon")
all.motifs <- c(human.mouse.motifs,
vert.motifs,
all.uniprobe,
all.swiss)
length(all.motifs)
motif.id.map <- data_frame(Long.ID = names(all.motifs),
Short.ID = values(all.motifs)$providerId,
TF = values(all.motifs)$geneSymbol)
head(motif.id.map)
length(unique(motif.id.map$TF))
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select("Motif" = "Target.ID",TF)
head(prelim.mapping); tail(prelim.mapping)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID$Short.ID))
length(nonredundant.motifs)
data_frame(Motif = names(nonredundant.motifs),
TF = values(nonredundant.motifs)$geneSymbol) %>%
bind_rows(prelim.mapping) -> dups.mapping
nrow(dups.mapping)
Table.2 <- dups.mapping[!duplicated(dups.mapping),]
nrow(Table.2); head(Table.2)
seth.table <- read.table(system.file(package="trena", "extdata", "motifGenes.tsv"), sep = "\t", header=TRUE, stringsAsFactors = FALSE)
head(seth.table)
german.truck <- seth.table %>% select("Short.ID" = "motif","TF" = "tf.gene")
head(german.truck)
length(intersect(german.truck$Short.ID,motif.id.map$Short.ID))
nrow(filter(german.truck, Short.ID %in% motif.id.map$Short.ID))
setdiff(german.truck$Short.ID,motif.id.map$Short.ID)
german.truck$Short.ID <- gsub(".*(UP\\d{5}).*","\\1",german.truck$Short.ID)
length(setdiff(german.truck$Short.ID,motif.id.map$Short.ID))
motifs.to.add <- german.truck %>% inner_join(motif.id.map, by = "Short.ID")
head(motifs.to.add)
trimmed.motifs <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
Table.2 %>% dplyr::union(trimmed.motifs) -> Motif.TF.Map
head(Motif.TF.Map); tail(Motif.TF.Map); nrow(Motif.TF.Map)
sum(duplicated(Motif.TF.Map))
head(blah)
hmm <- setdiff(blah, Motif.TF.Map)
head(hmm)
head(Motif.TF.Map)
library(dplyr)
hmm <- dplyr::setdiff(blah, Motif.TF.Map)
head(hmm)
motif.id.map %>% filter(grepl("SwissRegulon",Long.ID)) %>% head()
motif.id.map %>% filter(grepl("SwissRegulon",Long.ID)) %>% head()
motif.id.map %>% filter(grepl("SwissRegulon",Long.ID)) %>% head() -> test.set
test.set
gsub("^Hsapiens-SwissRegulon", "NA-SwissRegulon", test.set$Long.ID)
motif.id.map$Long.ID <- gsub("^Hsapiens-SwissRegulon", "NA-SwissRegulon", motif.id.map$Long.ID)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select("Motif" = "Target.ID",TF)
head(prelim.mapping); tail(prelim.mapping)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID$Short.ID))
length(nonredundant.motifs)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
name.vec <- c("Query.ID", "Target.ID", "Optimal.offset", "Pvalue","Evalue","Qvalue","Overlap","Query.consensus","Target.consensus","Orientation")
# All of HOCOMOCO to JASPAR
human.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_human/tomtom.txt", stringsAsFactors = FALSE)
mouse.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_mouse/tomtom.txt", stringsAsFactors = FALSE)
all.hoco <- rbind(human.hoco,mouse.hoco)
names(all.hoco) <- name.vec
# UniPROBE to JASPAR/HOCOMOCO and SwissRegulon to JASPAR/HOCOMOCO
uniprobe <- read.table(file = "./TOMTOM/uniprot_compare/tomtom.txt", stringsAsFactors = FALSE)
swissreg <- read.table(file = "./TOMTOM/swiss_regulon_compare/tomtom.txt", stringsAsFactors = FALSE)
names(uniprobe) <- name.vec
names(swissreg) <- name.vec
# SwissRegulon to UniPROBE
swiss.v.uniprobe <- read.table(file = "./TOMTOM/swiss_vs_uniprobe/tomtom.txt", stringsAsFactors = FALSE)
names(swiss.v.uniprobe) <- name.vec
df <- data_frame(Query = c("JH-A","JH-C","UP-D"),
Target = c("JH-B","UP-D","SR-E"))
df
list(all.hoco, uniprobe, swissreg) %>%
bind_rows() %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>%
filter(logP >= 7.3) -> first.4.tomtom
head(first.4.tomtom)
length(unique(first.4.tomtom$Query.ID))
swiss.repeats <- swiss.v.uniprobe %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>% filter(logP >= 7.3)
length(unique(swiss.repeats$Query.ID))
df1 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C"))
df1
df2 <- data_frame(Query = c("SR-A","SR-C","SR-D"),
Target = c("UP-A","UP-B","UP-D"))
df2
df3 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B", "SR-A","SR-C","SR-D"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C","J-B","J-C","UP-D"))
df3
# Create a "True Mapping" to JD
true.map <- df2 %>%
inner_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query, Target = Target.y) # Grab just the SR Queries and the J-D
true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- df2 %>%
anti_join(df1, by = c("Target" = "Query"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- df1 %>% bind_rows(list(true.map,new.map))
full.map
# First, pull out just query and target for each data set
swiss.repeats <- swiss.repeats %>% select(Query.ID,Target.ID)
first.4.tomtom <- first.4.tomtom %>% select(Query.ID,Target.ID)
# Create a "True Mapping" to JD
true.map <- swiss.repeats %>%
inner_join(first.4.tomtom, by = c("Target.ID" = "Query.ID")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query.ID, Target.ID = Target.ID.y) # Grab just the SR Queries and the J-D
#true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- swiss.repeats %>%
anti_join(first.4.tomtom, by = c("Target.ID" = "Query.ID"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- first.4.tomtom %>% bind_rows(list(true.map,new.map))
nrow(full.map)
swiss.repeats$Query.ID[1]
swiss.repeats %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
first.4.tomtom %>% filter(Query.ID == swiss.repeats$Target.ID[1]) %>% nrow()
full.map %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
group_by(Target.ID) %>%
summarise(Duplicates = n()) %>%
nrow()
unique.map <- full.map[!duplicated(full.map),]
nrow(unique.map)
first.4.tomtom[!duplicated(first.4.tomtom),] %>% nrow()
swiss.repeats[!duplicated(swiss.repeats),] %>% nrow()
Table.1 <- unique.map
library(MotifDb)
# Grab all jaspar and HOCOMOCOv10 for Human/Mouse
human.mouse.motifs <- subset(MotifDb, dataSource %in% c("HOCOMOCOv10","jaspar2016"))
human.mouse.motifs <- subset(human.mouse.motifs, organism %in% c("Hsapiens","Mmusculus"))
# Grab all jaspare for other vertebrates:
vertebrates <- c("Ggallus","Nsp.","Ocuniculus","Rnorvegicus","Rrattus","Vertebrata", "Xlaevis")
vert.motifs <- subset(query(MotifDb, "jaspar2016"), organism %in% vertebrates)
# Grab all UP and SR motifs
all.uniprobe <- query(MotifDb, "uniprobe")
all.swiss <- query(MotifDb, "swissregulon")
all.motifs <- c(human.mouse.motifs,
vert.motifs,
all.uniprobe,
all.swiss)
length(all.motifs)
motif.id.map <- data_frame(Long.ID = names(all.motifs),
Short.ID = values(all.motifs)$providerId,
TF = values(all.motifs)$geneSymbol)
head(motif.id.map)
length(unique(motif.id.map$TF))
motif.id.map %>% filter(grepl("SwissRegulon",Long.ID)) %>% head() -> test.set
test.set
gsub("^Hsapiens-SwissRegulon", "NA-SwissRegulon", test.set$Long.ID)
motif.id.map$Long.ID <- gsub("^Hsapiens-SwissRegulon", "NA-SwissRegulon", motif.id.map$Long.ID)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select("Motif" = "Target.ID",TF)
head(prelim.mapping); tail(prelim.mapping)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID$Short.ID))
length(nonredundant.motifs)
data_frame(Motif = names(nonredundant.motifs),
TF = values(nonredundant.motifs)$geneSymbol) %>%
bind_rows(prelim.mapping) -> dups.mapping
nrow(dups.mapping)
Table.2 <- dups.mapping[!duplicated(dups.mapping),]
nrow(Table.2); head(Table.2)
seth.table <- read.table(system.file(package="trena", "extdata", "motifGenes.tsv"), sep = "\t", header=TRUE, stringsAsFactors = FALSE)
head(seth.table)
german.truck <- seth.table %>% select("Short.ID" = "motif","TF" = "tf.gene")
head(german.truck)
length(intersect(german.truck$Short.ID,motif.id.map$Short.ID))
nrow(filter(german.truck, Short.ID %in% motif.id.map$Short.ID))
setdiff(german.truck$Short.ID,motif.id.map$Short.ID)
german.truck$Short.ID <- gsub(".*(UP\\d{5}).*","\\1",german.truck$Short.ID)
length(setdiff(german.truck$Short.ID,motif.id.map$Short.ID))
motifs.to.add <- german.truck %>% inner_join(motif.id.map, by = "Short.ID")
head(motifs.to.add)
trimmed.motifs <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
Table.2 %>% dplyr::union(trimmed.motifs) -> Motif.TF.Map
head(Motif.TF.Map); tail(Motif.TF.Map); nrow(Motif.TF.Map)
sum(duplicated(Motif.TF.Map))
dim(Motif.TF.Map)
dim(blah)
7.5e4/3600
library(ggpubr)
?desc_statby
?scale_y_continuous
?sec_axis
library(RColorBrewer)
?brewer.pal
darkcols <- brewer.pal(8, "jco")
display.brewer.all()
display.brewer.all(n=10)
display.brewer.all(n=120)
display.brewer.all(n=20)
display.brewer.all(n=10)
display.brewer.all(n=15)
display.brewer.all(n=11)
library(ggsci)
darkcols <- brewer.pal(8, "jco")
show_col(pal_jco("default")(10))
pal_jco("default")
darkcols <- brewer.pal(8, pal_jco("default"))
pal_jco("default")
pal_jco("default")[1]
library(scales)
show_col(pal_jco("default")(10))
?geom_point
?ggscatter
?ggpar
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
name.vec <- c("Query.ID", "Target.ID", "Optimal.offset", "Pvalue","Evalue","Qvalue","Overlap","Query.consensus","Target.consensus","Orientation")
# All of HOCOMOCO to JASPAR
human.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_human/tomtom.txt", stringsAsFactors = FALSE)
mouse.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_mouse/tomtom.txt", stringsAsFactors = FALSE)
all.hoco <- rbind(human.hoco,mouse.hoco)
names(all.hoco) <- name.vec
# UniPROBE to JASPAR/HOCOMOCO and SwissRegulon to JASPAR/HOCOMOCO
uniprobe <- read.table(file = "./TOMTOM/uniprot_compare/tomtom.txt", stringsAsFactors = FALSE)
swissreg <- read.table(file = "./TOMTOM/swiss_regulon_compare/tomtom.txt", stringsAsFactors = FALSE)
names(uniprobe) <- name.vec
names(swissreg) <- name.vec
# SwissRegulon to UniPROBE
swiss.v.uniprobe <- read.table(file = "./TOMTOM/swiss_vs_uniprobe/tomtom.txt", stringsAsFactors = FALSE)
names(swiss.v.uniprobe) <- name.vec
df <- data_frame(Query = c("JH-A","JH-C","UP-D"),
Target = c("JH-B","UP-D","SR-E"))
df
list(all.hoco, uniprobe, swissreg) %>%
bind_rows() %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>%
filter(logP >= 7.3) -> first.4.tomtom
head(first.4.tomtom)
length(unique(first.4.tomtom$Query.ID))
swiss.repeats <- swiss.v.uniprobe %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>% filter(logP >= 7.3)
length(unique(swiss.repeats$Query.ID))
df1 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C"))
df1
df2 <- data_frame(Query = c("SR-A","SR-C","SR-D"),
Target = c("UP-A","UP-B","UP-D"))
df2
df3 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B", "SR-A","SR-C","SR-D"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C","J-B","J-C","UP-D"))
df3
# Create a "True Mapping" to JD
true.map <- df2 %>%
inner_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query, Target = Target.y) # Grab just the SR Queries and the J-D
true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- df2 %>%
anti_join(df1, by = c("Target" = "Query"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- df1 %>% bind_rows(list(true.map,new.map))
full.map
# First, pull out just query and target for each data set
swiss.repeats <- swiss.repeats %>% select(Query.ID,Target.ID)
first.4.tomtom <- first.4.tomtom %>% select(Query.ID,Target.ID)
# Create a "True Mapping" to JD
true.map <- swiss.repeats %>%
inner_join(first.4.tomtom, by = c("Target.ID" = "Query.ID")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query.ID, Target.ID = Target.ID.y) # Grab just the SR Queries and the J-D
#true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- swiss.repeats %>%
anti_join(first.4.tomtom, by = c("Target.ID" = "Query.ID"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- first.4.tomtom %>% bind_rows(list(true.map,new.map))
nrow(full.map)
swiss.repeats$Query.ID[1]
swiss.repeats %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
first.4.tomtom %>% filter(Query.ID == swiss.repeats$Target.ID[1]) %>% nrow()
full.map %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
group_by(Target.ID) %>%
summarise(Duplicates = n()) %>%
nrow()
unique.map <- full.map[!duplicated(full.map),]
nrow(unique.map)
first.4.tomtom[!duplicated(first.4.tomtom),] %>% nrow()
swiss.repeats[!duplicated(swiss.repeats),] %>% nrow()
Table.1 <- unique.map
library(MotifDb)
# Grab all jaspar and HOCOMOCOv10 for Human/Mouse
human.mouse.motifs <- subset(MotifDb, dataSource %in% c("HOCOMOCOv10","jaspar2016"))
human.mouse.motifs <- subset(human.mouse.motifs, organism %in% c("Hsapiens","Mmusculus"))
# Grab all jaspare for other vertebrates:
vertebrates <- c("Ggallus","Nsp.","Ocuniculus","Rnorvegicus","Rrattus","Vertebrata", "Xlaevis")
vert.motifs <- subset(query(MotifDb, "jaspar2016"), organism %in% vertebrates)
# Grab all UP and SR motifs
all.uniprobe <- query(MotifDb, "uniprobe")
all.swiss <- query(MotifDb, "swissregulon")
all.motifs <- c(human.mouse.motifs,
vert.motifs,
all.uniprobe,
all.swiss)
length(all.motifs)
motif.id.map <- data_frame(Long.ID = names(all.motifs),
Short.ID = values(all.motifs)$providerId,
TF = values(all.motifs)$geneSymbol,
Origin = values(all.motif)$dataSource)
motif.id.map <- data_frame(Long.ID = names(all.motifs),
Short.ID = values(all.motifs)$providerId,
TF = values(all.motifs)$geneSymbol,
Origin = values(all.motifs)$dataSource)
head(motif.id.map)
length(unique(motif.id.map$TF))
motif.id.map %>% filter(grepl("SwissRegulon",Long.ID)) %>% head() -> test.set
test.set
gsub("^Hsapiens-SwissRegulon", "NA-SwissRegulon", test.set$Long.ID)
motif.id.map$Long.ID <- gsub("^Hsapiens-SwissRegulon", "NA-SwissRegulon", motif.id.map$Long.ID)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select("Motif" = "Target.ID",TF)
head(prelim.mapping); tail(prelim.mapping)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select("Motif" = "Target.ID",TF, Origin)
head(prelim.mapping); tail(prelim.mapping)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID$Short.ID))
length(nonredundant.motifs)
data_frame(Motif = names(nonredundant.motifs),
TF = values(nonredundant.motifs)$geneSymbol) %>%
bind_rows(prelim.mapping) -> dups.mapping
nrow(dups.mapping)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID$Short.ID))
length(nonredundant.motifs)
data_frame(Motif = names(nonredundant.motifs),
TF = values(nonredundant.motifs)$geneSymbol,
Origin = values(nonredundant.motifs)$dataSource) %>%
bind_rows(prelim.mapping) -> dups.mapping
nrow(dups.mapping)
Table.2 <- dups.mapping[!duplicated(dups.mapping),]
nrow(Table.2); head(Table.2)
Table.2 <- dups.mapping[!duplicated(dups.mapping),]
nrow(Table.2); head(Table.2); tail(Table.2)
german.truck <- seth.table %>% select("Short.ID" = "motif","TF" = "tf.gene") %>% mutate(Origin = "TFClass")
head(german.truck)
length(intersect(german.truck$Short.ID,motif.id.map$Short.ID))
nrow(filter(german.truck, Short.ID %in% motif.id.map$Short.ID))
setdiff(german.truck$Short.ID,motif.id.map$Short.ID)
german.truck$Short.ID <- gsub(".*(UP\\d{5}).*","\\1",german.truck$Short.ID)
length(setdiff(german.truck$Short.ID,motif.id.map$Short.ID))
motifs.to.add <- german.truck %>% inner_join(motif.id.map, by = "Short.ID")
head(motifs.to.add)
trimmed.motifs <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x", "Origin" = "Origin.x")
Table.2 %>% dplyr::union(trimmed.motifs) -> Motif.TF.Map
head(Motif.TF.Map); tail(Motif.TF.Map); nrow(Motif.TF.Map)
sum(duplicated(Motif.TF.Map))
data_frame(Motif = c("A","A","B"),
TF = c("1","1","2"),
Origin = c("a","b","a"))
data_frame(Motif = c("A","B"),
TF = c("1","2"),
Origin = c("a;b","a"))
names(Motif.TF.Map)
Motif.TF.Map %>% select(TF, Origin) %>%
group_by(Origin) %>%
summarize(Total.TFs = n(TF),
Unique.TFs = n_distinct(TF))
Motif.TF.Map %>% select(TF, Origin) %>%
group_by(Origin) %>%
summarize(Total.TFs = n(),
Unique.TFs = n_distinct(TF))
Motif.TF.Map %>% group_by(Origin) %>%
summarise(Total = n())
Motif.TF.Map %>% select(TF, Origin) %>%
group_by(Origin) %>%
summarize(Total.Mappings = n(),
Unique.TFs = n_distinct(TF))
Motif.TF.Map %>% select(TF, Origin) %>%
group_by(Origin) %>%
summarize(Total.Mappings = n(),
Unique.TFs = n_distinct(TF))
df <- data_frame(Motif = c("A","A","B"),
TF = c("1","1","2"),
Origin = c("a","b","a"))
df %>% nest(TF)
library(tidyr)
df %>% nest(TF)
?nest
as_tibble(iris) %>% nest(-Species)
df <- data.frame(x = c(1, 1, 2), y = 3:1)
df %>% nest(y)
df
df <- data_frame(Motif = c("A","A","B"),
TF = c("1","1","2"),
Origin = c("a","b","a"))
df2 <- data.frame(x = c(1, 1, 2), y = 3:1)
df2 %>% nest(y)
df
df %>% nest(Origin)
df %>% nest(Origin) -> my.out
my.out$data
df2 %>% nest(y)
df2
df %>% select(TF, Origin) %>% nest(Origin)
df %>% select(TF, Origin) %>% nest(Origin) -> my.out
my.out$data
df %>% nest(Origin)
df %>% nest(Origin)library(dplyr)
iris %>% nest(-Species)
library(dplyr)
iris %>% nest(-Species)
df %>% nest(-Origin)
df %>% nest(Origin)
df %>% nest(Origin) %>% unnest()
df %>% nest(Origin) -> df.w.dfs
df$data %>% lapply(as.character)
df$data[1]
df.w.dfs$data %>% lapply(as.character)
df.w.dfs$data %>% sapply(as.character)
df.w.dfs$data %>% sapply(as.vector)
df.w.dfs$data %>% sapply(as.vector) %>% sapply(paste(collapse = ","))
df.w.dfs$data %>% sapply(as.vector) -> my.vector
my.vector
df.w.dfs$data[1]
df.w.dfs$data[1]$Origin
df.w.dfs$data[[1]]$Origin
df.w.dfs$data[[1]]$Origin %>% paste0(collapse = ",")
df.w.dfs$data[[1]]$Origin %>% paste0(collapse = ";")
df.w.dfs$data[[1]]$Origin %>% paste0(collapse = "; ")
df.w.dfs$data[[1]]$Origin %>% paste0(collapse = ";")
df.w.dfs$data[[2]]$Origin %>% paste0(collapse = ";")
f <- function(x){x$Origin %>% paste0(collapse = ";")}
sapply(df.w.dfs$data, f)
library(tidyr)
# Create a list variable (a list of data frames) with nest
df %>% nest(Origin) -> df.w.dfs
# Use an sapply to change the column with a collapse
f <- function(x){x$Origin %>% paste0(collapse = ";")}
df.w.dfs$Origin <- sapply(df.w.dfs$data, f)
df.w.dfs$data <- NULL
df.w.dfs
Motif.TF.Map %>% nest(Origin) -> Motif.TF.Map.Collapsed
Motif.TF.Map.Collapsed$Origin <- sapply(Motif.TF.Map.Collapsed$data, f)
Motif.TF.Map.Collapsed$data <- NULL
head(Motif.TF.Map.Collapsed)
Motif.TF.Map.Collapsed %>% select(TF, Origin) %>%
group_by(Origin) %>%
summarize(Total.Mappings = n(),
Unique.TFs = n_distinct(TF))
Motif.TF.Map %>% arrange(Origin) %>%
nest(Origin) -> Motif.TF.Map.Collapsed
Motif.TF.Map.Collapsed$Origin <- sapply(Motif.TF.Map.Collapsed$data, f)
Motif.TF.Map.Collapsed$data <- NULL
head(Motif.TF.Map.Collapsed)
Motif.TF.Map.Collapsed %>% select(TF, Origin) %>%
group_by(Origin) %>%
summarize(Total.Mappings = n(),
Unique.TFs = n_distinct(TF))
nrow(Motif.TF.Map.Collapsed)
names(Motif.TF.Map.Collapsed)
Motif.TF.Map.Expanded <- Motif.Tf.Map
Motif.TF.Map.Expanded <- Motif.TF.Map
Motif.TF.Map <- Motif.TF.Map.Collapsed %>% select(Motif, TF) %>% arrange(Motif, TF)
