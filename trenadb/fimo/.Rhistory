list(all.hoco, uniprobe, swissreg) %>%
bind_rows() %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>%
filter(logP >= 7.3) -> first.4.tomtom
head(first.4.tomtom)
list(all.hoco, uniprobe, swissreg) %>%
bind_rows() %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>%
filter(logP >= 7.3) -> first.4.tomtom
head(first.4.tomtom)
list(all.hoco, uniprobe, swissreg) %>%
bind_rows() %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>%
filter(logP >= 7.3) -> first.4.tomtom
head(first.4.tomtom)
name.vec <- c("Query.ID", "Target.ID", "Optimal.offset", "Pvalue","Evalue","Qvalue","Overlap","Query.consensus","Target.consensus","Orientation")
# All of HOCOMOCO to JASPAR
human.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_human/tomtom.txt", stringsAsFactors = FALSE)
mouse.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_mouse/tomtom.txt", stringsAsFactors = FALSE)
all.hoco <- rbind(human.hoco,mouse.hoco)
names(all.hoco) <- name.vec
# UniPROBE to JASPAR/HOCOMOCO and SwissRegulon to JASPAR/HOCOMOCO
uniprobe <- read.table(file = "./TOMTOM/uniprot_compare/tomtom.txt", stringsAsFactors = FALSE)
swissreg <- read.table(file = "./TOMTOM/swiss_regulon_compare/tomtom.txt", stringsAsFactors = FALSE)
names(uniprobe) <- name.vec
names(swissreg) <- name.vec
# SwissRegulon to UniPROBE
swiss.v.uniprobe <- read.table(file = "./TOMTOM/swiss_vs_uniprobe/tomtom.txt", stringsAsFactors = FALSE)
names(swiss.v.uniprobe) <- name.vec
list(all.hoco, uniprobe, swissreg) %>%
bind_rows() %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>%
filter(logP >= 7.3) -> first.4.tomtom
head(first.4.tomtom)
"A" + 1
?rename
df
df %>% select(Query)
df %>% select(query = Query)
query <- "Hi"
df %>% select(!!query = Query)
df %>% select((!!query) = Query)
df %>% rename((!!query) = Query)
df %>% rename(query = Query)
df %>% rename(query = "Query")
df %>% rename("query" = "Query")
df %>% rename("Query" = "query")
df %>% rename("Query" = !!(query)
)
df %>% rename("Query" = !!(query))
df %>% rename("Query" = UQ(query))
?!!
''
df %>% rename("Query" = query
)
df %>% rename("Query" = query)
df %>% select("Query" = query)
df %>% select(query = "Query")
var <- "Hi"
df %>% rename("Query" = var)
var <- "Blah_12m"
df %>% rename("Query" = var)
sessionInfo()
length(unique(first.4.tomtom$Query.ID))
swiss.repeats <- swiss.v.uniprobe %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>% filter(logP >= 7.3)
length(unique(swiss.repeats$Query.ID))
df1 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C"))
df1
df2 <- data_frame(Query = c("SR-A","SR-C"),
Target = c("UP-A","UP-C"))
df2
df2 <- data_frame(Query = c("SR-A","SR-C","SR-D"),
Target = c("UP-A","UP-B","UP-D"))
df2
df3 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B", "SR-A","SR-C","SR-D"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C","J-B","J-C","UP-D")))
df3 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B", "SR-A","SR-C","SR-D"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C","J-B","J-C","UP-D"))
df3
left_join(df2, df1, by = ("Target" = "Query"))
semi_join(df2, df1, by = ("Target" = "Query"))
left_join(df2, df1, by = ("Target" = "Query"))
semi_join(df2, df1, by = ("Target" = "Query"))
left_join(df2, df1, by = ("Target" = "Query")) %>%
semi_join(df1, by = ("Target.x" = "Query"))
# Create a "True Mapping"
left_join(df2, df1, by = ("Target" = "Query")) %>%
semi_join(df1, by = ("Target.x" = "Query"))
# Create a "True Mapping"
df2 %>% left_join(df2, df1, by = ("Target" = "Query")) %>%
semi_join(df1, by = ("Target.x" = "Query")) %>%
select(Query, Target = Target.y)
df2 %>% left_join(df2, df1, by = ("Target" = "Query")) %>%
semi_join(df1, by = ("Target.x" = "Query"))
# Create a "True Mapping"
df2 %>% left_join(df2, df1, by = ("Target" = "Query")) %>%
semi_join(df1, by = ("Target.x" = "Query"))
# Create a "True Mapping"
df2 %>% left_join(df1, by = ("Target" = "Query")) %>%
semi_join(df1, by = ("Target.x" = "Query"))
# Create a "True Mapping"
df2 %>% left_join(df1, by = ("Target" = "Query")) %>%
semi_join(df1, by = ("Target.x" = "Query")) %>%
select(Query, Target = Target.y)
new.map <- df2 %>%
anti_join(df1, by = ("Target" = "Query"))
df2 %>%
anti_join(df1, by = ("Target" = "Query"))
# Create a "True Mapping" to JD
true.map <- df2 %>%
left_join(df1, by = ("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones
semi_join(df1, by = ("Target.x" = "Query")) %>% # Filter out only ones with "true" J-ones
select(Query, Target = Target.y) # Grab just the SR Queries and the J-D
# Create a "Full Mapping" by pulling out things w/o JD relationships and adding the "true.map"
full.map <- df2 %>%
anti_join(df1, by = ("Target" = "Query")) %>%
bind_rows(true.map)
full.map
# Create a "True Mapping" to JD
true.map <- df2 %>%
left_join(df1, by = ("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones
semi_join(df1, by = ("Target.x" = "Query")) %>% # Filter out only ones with "true" J-ones
select(Query, Target = Target.y) # Grab just the SR Queries and the J-D
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- df2 %>%
anti_join(df1, by = ("Target" = "Query")) %>%
bind_rows(true.map)
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- df1 %>% bind_rows(new.map)
full.map
true.map
df2 %>%
left_join(df1, by = ("Target" = "Query"))
true.map <- df2 %>%
right_join(df1, by = ("Target" = "Query"))
df2 %>%
right_join(df1, by = ("Target" = "Query"))
df2 %>%
full_join(df1, by = ("Target" = "Query"))
df2 %>%
full_join(df1, by = ("Query" = "Target"))
df2 %>%
full_join(df1, by = ("Target" = "Query"))
df2 %>%
full_join(df1, by = ("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones
semi_join(df1, by = ("Target.x" = "Query"))
?left_join
df2 %>%
full_join(df1, by = c("Target" = "Query"))
df2 %>%
full_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones
semi_join(df1, by = c("Target.x" = "Query"))
df2 %>%
left_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones
semi_join(df1, by = c("Target.x" = "Query"))
df2 %>%
left_join(df1, by = c("Target" = "Query"))
df2 %>%
left_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones
semi_join(df1, by = c("Target" = "Query"))
true.map <- df2 %>%
left_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones
semi_join(df1, by = c("Target" = "Query")) %>% # Filter out only ones with "true" J-ones
select(Query, Target = Target.y)
true.map
new.map <- df2 %>%
anti_join(df1, by = c("Target" = "Query")) %>%
bind_rows(true.map)
full.map <- df1 %>% bind_rows(new.map)
full.map
df2 %>%
inner_join(df1, by = c("Target" = "Query"))
# Create a "True Mapping" to JD
true.map <- df2 %>%
inner_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query, Target = Target.y) # Grab just the SR Queries and the J-D
true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- df2 %>%
anti_join(df1, by = c("Target" = "Query")) %>%
bind_rows(true.map)
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- df1 %>% bind_rows(new.map)
full.map
# Create a "True Mapping" to JD
true.map <- df2 %>%
inner_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query, Target = Target.y) # Grab just the SR Queries and the J-D
true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- df2 %>%
anti_join(df1, by = c("Target" = "Query"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- df1 %>% bind_rows(list(true.map,new.map))
full.map
# First, pull out just query and target for each data set
swiss.repeats <- swiss.repeats %>% select(Query.ID,Target.ID)
first.4.tomtom <- first.4.tomtom %>% select(Query.ID,Target.ID)
# Create a "True Mapping" to JD
true.map <- swiss.repeats %>%
inner_join(first.4.tomtom, by = c("Target.ID" = "Query.ID")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query.ID, Target.ID = Target.ID.y) # Grab just the SR Queries and the J-D
#true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- swiss.repeats %>%
anti_join(first.4.tomtom, by = c("Target.ID" = "Query.ID"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- first.4.tomtom %>% bind_rows(list(true.map,new.map))
#full.map
# Create a "True Mapping" to JD
true.map <- df2 %>%
inner_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query, Target = Target.y) # Grab just the SR Queries and the J-D
true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- df2 %>%
anti_join(df1, by = c("Target" = "Query"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- df1 %>% bind_rows(list(true.map,new.map))
full.map
# First, pull out just query and target for each data set
swiss.repeats <- swiss.repeats %>% select(Query.ID,Target.ID)
first.4.tomtom <- first.4.tomtom %>% select(Query.ID,Target.ID)
# Create a "True Mapping" to JD
true.map <- swiss.repeats %>%
inner_join(first.4.tomtom, by = c("Target.ID" = "Query.ID")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query.ID, Target.ID = Target.ID.y) # Grab just the SR Queries and the J-D
#true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- swiss.repeats %>%
anti_join(first.4.tomtom, by = c("Target.ID" = "Query.ID"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- first.4.tomtom %>% bind_rows(list(true.map,new.map))
#full.map
swiss.repeats <- swiss.repeats %>% select(Query.ID,Target.ID)
first.4.tomtom <- first.4.tomtom %>% select(Query.ID,Target.ID)
head(swiss.repeats)
head(first.4.tomtom)
dim(swiss.repeats)
dim(first.4.tomtom)
true.map <- swiss.repeats %>%
inner_join(first.4.tomtom, by = c("Target.ID" = "Query.ID")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query.ID, Target.ID = Target.ID.y)
dim(true.map)
length(unique(true.map$Query.ID))
# First, pull out just query and target for each data set
swiss.repeats <- swiss.repeats %>% select(Query.ID,Target.ID)
first.4.tomtom <- first.4.tomtom %>% select(Query.ID,Target.ID)
# Create a "True Mapping" to JD
true.map <- swiss.repeats %>%
inner_join(first.4.tomtom, by = c("Target.ID" = "Query.ID")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query.ID, Target.ID = Target.ID.y) # Grab just the SR Queries and the J-D
#true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- swiss.repeats %>%
anti_join(first.4.tomtom, by = c("Target.ID" = "Query.ID"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- first.4.tomtom %>% bind_rows(list(true.map,new.map))
nrow(full.map)
head(true.map,20)
head(swiss.repeats,20)
nrow(new.map)
swiss.repeats$Query.ID[1]
swiss.repeats %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
## Including Plots
You can also embed plots, for example:
swiss.repeats %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
first.4.tomtom %>% filter(Query.ID == swiss.repeats$Target.ID[1]) %>% nrow()
full.map %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
blah <- union(full.map)
blah <- union(full.map,data.frame())
head(blah)
blah <- union(full.map,data.frame(Query.ID,Target.ID))
df <- data_frame(x=c(1,2,1),y=c("A","B","A"))
df
duplicated(df)
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
duplicated(df) %>%
sum()
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
duplicated(df)
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
duplicated() %>%
sum()
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
group_by(Target.ID) %>%
summarise(Duplicates = n())
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
group_by(Target.ID) %>%
summarise(Duplicates = n()) %>%
nrow()
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
group_by(Target.ID) %>%
summarise(Duplicates = n()) %>%
nrow()
head(swiss.repeats)
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
group_by(Target.ID) %>%
summarise(Duplicates = n())
df
df[!duplicated(df),]
unique.map <- full.map[!duplicated(full.map),]
nrow(unique.map)
unique.map <- full.map[!duplicated(full.map),]
nrow(unique.map)
first.4.tomtom[!duplicated(full.map),] %>% nrow()
first.4.tomtom[!duplicated(first.4.tomtom),] %>% nrow()
swiss.repeats[!duplicated(swiss.repeats),] %>% nrow()
swiss.repeats[!duplicated(swiss.repeats),] %>% nrow()
all.motifs <- c(human.mouse.motifs,
vert.motifs,
all.uniprobe,
all.swiss)
# Grab all jaspar and HOCOMOCOv10 for Human/Mouse
human.mouse.motifs <- subset(MotifDb, dataSource %in% c("HOCOMOCOv10","jaspar2016"))
human.mouse.motifs <- subset(all.motifs, organism %in% c("Hsapiens","Mmusculus"))
# Grab all jaspar and HOCOMOCOv10 for Human/Mouse
human.mouse.motifs <- subset(MotifDb, dataSource %in% c("HOCOMOCOv10","jaspar2016"))
human.mouse.motifs <- subset(human.mouse.motifs, organism %in% c("Hsapiens","Mmusculus"))
# Grab all jaspare for other vertebrates:
vertebrates <- c("Ggallus","Nsp.","Ocuniculus","Rnorvegicus","Rrattus","Vertebrata", "Xlaevis")
vert.motifs <- subset(query(MotifDb, "jaspar2016"), organism %in% vertebrates)
# Grab all UP and SR motifs
all.uniprobe <- query(MotifDb, "uniprobe")
all.swiss <- query(MotifDb, "swissregulon")
all.motifs <- c(human.mouse.motifs,
vert.motifs,
all.uniprobe,
all.swiss)
length(all.motifs)
head(names(all.motifs))
motif.id.map <- data_frame(Long.ID = names(all.motifs),
Short.ID = values(all.motifs)$providerId)
motif.id.map <- data_frame(Long.ID = names(all.motifs),
Short.ID = values(all.motifs)$providerId)
head(motif.id.map)
motif.id.map <- data_frame(Long.ID = names(all.motifs),
Short.ID = values(all.motifs)$providerId,
TF = values(all.motifs)$geneSymbol)
head(motif.id.map)
tail(motif.id.map)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
head()
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
head()
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>% head()
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID"))
head(prelim.mapping)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select(Target.ID,TF)
head(prelim.mapping)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select(Target.ID,TF)
head(prelim.mapping); tail(prelim.mapping)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select(Target.ID,TF)
head(prelim.mapping); tail(prelim.mapping); nrow(prelim.mapping)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select(Target.ID,TF)
head(prelim.mapping); tail(prelim.mapping)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
head(short.ID)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerID %in% short.ID))
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID))
length(nonredundant.motifs)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID))
length(nonredundant.motifs)
head(short.ID)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID))
length(nonredundant.motifs)
tail(short.ID)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID))
length(nonredundant.motifs)
tail(short.ID)
blah <- values(all.motifs)$providerId
length(intersect(blah, short.ID))
class(blah)
class(short.ID)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID$Short.ID))
length(nonredundant.motifs)
tail(short.ID)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID$Short.ID))
length(nonredundant.motifs)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select(Target.ID = Motif,TF)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select(Target.ID = "Motif"",TF)
head(prelim.mapping); tail(prelim.mapping)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select("Target.ID" = "Motif"",TF)
head(prelim.mapping); tail(prelim.mapping)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select("Motif" = "Target.ID",TF)
head(prelim.mapping); tail(prelim.mapping)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID$Short.ID))
length(nonredundant.motifs)
data_frame(Motif = names(nonredundant.motifs),
TF = values(nonredundant.motifs)$geneSymbol) %>%
bind_rows(prelim.mapping) --> dups.mapping
data_frame(Motif = names(nonredundant.motifs),
TF = values(nonredundant.motifs)$geneSymbol) %>%
bind_rows(prelim.mapping) -> dups.mapping
data_frame(Motif = names(nonredundant.motifs),
TF = values(nonredundant.motifs)$geneSymbol) %>%
bind_rows(prelim.mapping) -> dups.mapping
nrow(dups.mapping)
Table.2 <- dups.mapping[!duplicated(dups.mapping),]
nrow(Table.2); head(Table.2)
seth.table <- read.table(system.file(package="trena", "extdata", "motifGenes.tsv"), sep = "\t", header=TRUE)
head(seth.table)
seth.table <- read.table(system.file(package="trena", "extdata", "motifGenes.tsv"), sep = "\t", header=TRUE, stringsAsFactors = FALSE)
head(seth.table)
german.truck <- seth.table %>% select("motif" = "Short.ID","tf.gene" = "TF")
german.truck <- seth.table %>% select("Short.ID" = "motif","TF" = "tf.gene")
german.truck <- seth.table %>% select("Short.ID" = "motif","TF" = "tf.gene")
head(german.truck)
length(intersect(german.truck$Short.ID,motif.id.map$Short.ID))
length(filter(german.truck, Short.ID %in% motif.id.map$Short.ID))
nrow(filter(german.truck, Short.ID %in% motif.id.map$Short.ID))
setdiff(german.truck$Short.ID,motif.id.map$Short.ID)
german.truck$Short.ID <- gsub(".*(UP\\d{5}).*","\\1",german.truck$Short.ID)
length(setdiff(german.truck$Short.ID,motif.id.map$Short.ID))
head(german.truck %>% inner_join(motif.id.map, by = "Short.ID"))
motifs.to.add <- german.truck %>% inner_join(motif.id.map, by = "Short.ID")
head(motifs.to.add)
motifs.to.add <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
Table.2 %>% bind_rows(motifs.to.add) -> Motif.TF.Map
head(Motif.TF.Map)
motifs.to.add <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
motifs.to.add <- german.truck %>% inner_join(motif.id.map, by = "Short.ID")
head(motifs.to.add)
motifs.to.add <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
Table.2 %>% bind_rows(motifs.to.add) -> Motif.TF.Map
head(Motif.TF.Map); tail(Motif.TF.Map)
motifs.to.add <- german.truck %>% inner_join(motif.id.map, by = "Short.ID")
head(motifs.to.add)
trimmed.motifs <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
Table.2 %>% bind_rows(trimmed.motifs) -> Motif.TF.Map
head(Motif.TF.Map); tail(Motif.TF.Map)
trimmed.motifs <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
Table.2 %>% bind_rows(trimmed.motifs) -> prelim.motif.map
head(prelim.motif.map); tail(prelim.motif.map)
Motif.TF.Map <- prelim.motif.map[!duplicated(prelim.motif.map),]
nrow(Motif.TF.Map)
trimmed.motifs <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
Table.2 %>% union(trimmed.motifs) -> prelim.motif.map
head(prelim.motif.map); tail(prelim.motif.map)
?union
trimmed.motifs <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
Table.2 %>% dplyr::union(trimmed.motifs) -> prelim.motif.map
head(prelim.motif.map); tail(prelim.motif.map)
trimmed.motifs <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x")
Table.2 %>% dplyr::union(trimmed.motifs) -> prelim.motif.map
head(prelim.motif.map); tail(prelim.motif.map); nrow(prelim.motif.map)
sum(duplicated(prelim.motif.map))
sum(duplicated(Motif.TF.Map))
saveRDS(Motif.Tf.Map, "./2017_08_23_Motif_TF_Map.RDS")
saveRDS(Motif.TF.Map, "./2017_08_23_Motif_TF_Map.RDS")
library(dplyr)
?data_frame
df1 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C"))
df1
