CREATE DATABASE
GRANT
CREATE DATABASE
GRANT
You are now connected to database "skin_wellington_16" as user "postgres".
CREATE TABLE
GRANT
CREATE TABLE
GRANT
You are now connected to database "skin_hint_16" as user "postgres".
CREATE TABLE
GRANT
CREATE TABLE
GRANT

R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)


R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> > # users can either step through this file, or call this file with 
# users can either step through this file, or call this file with 
> # r -f example.R
> # r -f example.R
> 
> 
> # THIS ASSUMES THAT THE TESTHINT DATABASE EXISTS. The recipe for building that
> # THIS ASSUMES THAT THE TESTHINT DATABASE EXISTS. The recipe for building that
> # database is in ../dbInitialization/createHintTest.sql
> # database is in ../dbInitialization/createHintTest.sql
> 
> 
> # THIS EXAMPLE USES THE BRAIN HINT OUTPUT MADE BY RUNNING make hint at /scratch/data/footprints
> # THIS EXAMPLE USES THE BRAIN HINT OUTPUT MADE BY RUNNING make hint at /scratch/data/footprints
> 
> 
> print(date())
> print(date())
[1] "Tue Jun 27 17:04:11 2017"
> #-------------------------------------------------------------------------------
[1] "Tue Jun 27 17:04:11 2017"
> # set path to hint output 
> #-------------------------------------------------------------------------------
> data.path <- "/scratch/data/footprints/seed16/skin/hint"
> # set path to hint output 
> data.path <- "/scratch/data/footprints/seed16/skin/wellington"
> #-------------------------------------------------------------------------------
> # establish database connections:
> #-------------------------------------------------------------------------------
> 
> > # establish database connections:
if(!exists("db.hint"))
> 
+     db.hint <- "skin_hint_16_localhost"
> if(!exists("db.wellington"))
+     db.wellington <- "skin_wellington_16_localhost"
> 
> if(!exists("db.fimo"))
+     db.fimo <- "fimo_localhost"
> 
> if(!exists("db.fimo"))
+ >     db.fimo <- "fimo_localhost"
#-------------------------------------------------------------------------------
> if(!interactive()){    
+     chromosomes <- paste("chr", c(1:22,"X","Y","MT"), sep="")
> #-------------------------------------------------------------------------------
> if(!interactive()){    
+     
+     chromosomes <- paste("chr", c(1:22,"X","Y","MT"), sep="")
+     # Create parallel structure here    
+ +     
    library(foreach); library(doParallel)    
+     # Create parallel structure here    
+     library(foreach); library(doParallel)    
+     cores <- detectCores()    
+     cl <- makeCluster(cores[1] - 1)    
+     cores <- detectCores()    
+     registerDoParallel(cl)      
+     cl <- makeCluster(cores[1] - 1)    
+ 
+     registerDoParallel(cl)      
+     # Pass path variables and source files
+ 
+     clusterExport(cl, varlist = c("data.path","db.fimo", "db.hint"),
+     # Pass path variables and source files
+                   envir = environment())
+     clusterExport(cl, varlist = c("data.path","db.fimo", "db.wellington"),
+     
+                   envir = environment())
+     junk <- clusterEvalQ(cl, source("../src/dependencies.R"))
+     
+     junk <- clusterEvalQ(cl, source("../src/dbFunctions.R"))
+     junk <- clusterEvalQ(cl, source("../src/dependencies.R"))
+     junk <- clusterEvalQ(cl, source("../src/tableParsing.R"))
+     junk <- clusterEvalQ(cl, source("../src/dbFunctions.R"))
+     junk <- clusterEvalQ(cl, source("../src/tests.R"))
+     junk <- clusterEvalQ(cl, source("../src/tableParsing.R"))
+     junk <- clusterEvalQ(cl, source("../src/main.R"))
+     junk <- clusterEvalQ(cl, source("../src/tests.R"))
+ 
+     junk <- clusterEvalQ(cl, source("../src/main.R"))
+     # Run on all 24 possible chromosomes at once
+ 
+     foreach(i=1:length(chromosomes)) %dopar% {
+     # Run on all 24 possible chromosomes at once
+         fillAllSamplesByChromosome(chromosome = chromosomes[[i]],
+     foreach(i=1:length(chromosomes)) %dopar% {
+                                    dbConnection = db.hint,
+         fillAllSamplesByChromosome(chromosome = chromosomes[[i]],
+                                    fimo = db.fimo,
+                                    dbConnection = db.wellington,
+                                    minid = "skin_hint_16.minid",
+                                    fimo = db.fimo,
+                                    dbUser = "trena",
+                                    minid = "skin_wellington_16.minid",
+                                    dbTable = "skin_hint_16",
+                                    sourcePath = data.path,
+                                    dbUser = "trena",
+                                    isTest = FALSE,
+                                    dbTable = "skin_wellington_16",
+                                    method = "HINT")
+                                    sourcePath = data.path,
+ 				   }				  
+                                    isTest = FALSE,
+ }
+                                    method = "WELLINGTON")
+ 				   }				  
+ }
Loading required package: iterators
Loading required package: iterators
Loading required package: parallel
Loading required package: parallel
